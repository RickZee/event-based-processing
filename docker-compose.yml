version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - '2181:2181'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: echo srvr | nc zookeeper 2181 || exit 1
      start_period: 10s
      retries: 20
      interval: 10s
    networks:
      code-with-yu:

  broker:
    image: confluentinc/cp-kafka:7.4.0
    hostname: broker
    container_name: broker
    ports:
      - '29092:29092'
      - '9092:9092'
      - '9101:9101'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      code-with-yu:

  # control-center:
  #   image: confluentinc/cp-enterprise-control-center:7.4.5.arm64
  #   hostname: control-center
  #   container_name: control-center
  #   depends_on:
  #     broker:
  #       condition: service_healthy
  #   ports:
  #     - "9021:9021"
  #   environment:
  #     CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
  #     CONTROL_CENTER_REPLICATION_FACTOR: 1
  #     CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
  #     CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
  #     CONFLUENT_METRICS_TOPIC_REPLICATION: 1
  #     CONFLIENT_METRICS_ENABLE: 'false'
  #     PORT: 9021
  #   networks:
  #     - code-with-yu
  #   healthcheck:
  #     test: [ "CMD", "curl", "-f", "http://localhost:9021/health" ]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5

  # kafka-ui:
  #   image: provectuslabs/kafka-ui:latest
  #   ports:
  #     - 8080:8080
  #   environment:
  #     - KAFKA_CLUSTERS_0_NAME=local
  #     - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=broker:9092
  #     - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
  #   depends_on:
  #     - broker
  #     # - schema-registry

  debezium:
    image: debezium/connect:1.4
    container_name: debezium
    hostname: debezium
    depends_on:
      postgres:
        condition: service_healthy
      broker:
        condition: service_healthy
    ports:
      - '8093:8083'
    environment:
      BOOTSTRAP_SERVERS: broker:29092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      OFFSET_STORAGE_TOPIC: connect_offsets
      STATUS_STORAGE_TOPIC: connect_statuses
      DATABASE_HOSTNAME: postgres
      DATABASE_PORT: 5432
      DATABASE_USER: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_DBNAME: postgres
      DATABASE_SERVER_NAME: dbserver1
      DATABASE_INCLUDE: public
      DATABASE_HISTORY_KAFKA_BOOTSTRAP_SERVERS: broker:9092      
      CONNECT_REST_ADVERTISED_HOST_NAME: debezium
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      ENABLE_DEBEZIUM_SCRIPTING: 'true'
    healthcheck:
      test:
        [ 'CMD', 'curl', '--silent', '--fail', '-X', 'GET', 'http://localhost:8083/connectors', ]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      code-with-yu:

  # debezium-ui:
  #   image: debezium/debezium-ui:2.1
  #   container_name: debezium-ui
  #   hostname: debezium-ui
  #   depends_on:
  #     debezium:
  #       condition: service_healthy
  #   ports:
  #     - '8080:8080'
  #   environment:
  #     KAFKA_CONNECT_URIS: http://debezium:8083
  #   networks:
  #     code-with-yu:

  postgres:
    image: postgres:latest
    container_name: postgres
    hostname: postgres
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: financial_db
    command: [ 'postgres', '-c', 'wal_level=logical' ]
    healthcheck:
      test: [ 'CMD', 'psql', '-U', 'postgres', '-c', 'SELECT 1' ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      code-with-yu:

  pgadmin:
    image: dpage/pgadmin4:8.6
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@pgadmin.com
      PGADMIN_DEFAULT_PASSWORD: postgres
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_LISTEN_PORT: 8082
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    ports:
      - "8082:8082"
    depends_on:
      - postgres
    networks:
      code-with-yu:
          
networks:
  code-with-yu:
    name: code-with-yu
    driver: bridge

volumes:
  pgadmin-data:
